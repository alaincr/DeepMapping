text = expression(lambda*phantom(" ")(s[italic('x,y')] %.% km^-2)),
side = 4,
font = 2,
line = 2,
cex = 0.6
)
)
}
# Add legend
}
plot.time()
round(cintx$brks,digits=0)
plot.time=function(){
tokmsq=1000000
plot.t=function(predpts,year){
# Get predictions after 2011
predpts.gt2009=subset(predpts,YEAR2==year)
predpts.gt2009@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kde=ptDensity(predpts.gt2009,studyarea)
return(kde*tokmsq)
}
set.panel()
par(mfrow=c(3,1),mai=c(0,0,0,.2),oma=c(0,0,0,4),bty="n")
# Create class breaks
blist=list()
valvec=vector("numeric")
for(i in c(2009,2012,2016)){
blist[[as.character(i)]]=plot.t(predpts,i)
#blist[[i]]
# tvals=values(blist[[i]])
# valvec=c(valvec,tvals)
}
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(10)
lablist=list()
lablist[['2009']]="A"
lablist[['2012']]="B"
lablist[['2016']]="C"
for(i in c('2009','2012','2016')){
#valvec=valvec[!is.na(valvec)]*tokmsq
#par(oma=c(0,0,0,4))
cintx=densBreaks(blist[[i]],9,'equal')
plot(blist[[i]], breaks=cintx$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
if(i==2009) scalebar(d = 5000, xy = c(358258.223,5033798.921), type = 'bar', divs = 2, below = 'm')
par(usr=c(0,1,0,1))
text(0.05,0.9,lablist[[i]],cex=2)
#set.panel(1,1)
#par(oma=c(0,0,0,1))
plot(
blist[[i]],
legend.only = TRUE,
add=TRUE,
breaks = round(cintx$brks,digits=0),
col = my.palette,
axes = FALSE,
legend.width = 1,
legend.shrink = 0.45,
horizontal = FALSE,
axis.args = list(cex.axis = 0.5),
legend.args = list(
text = expression(lambda*phantom(" ")(s[italic('x,y')] %.% km^-2)),
side = 4,
font = 2,
line = 2,
cex = 0.6
)
)
}
# Add legend
}
plot.time()
ptDensity = function(a, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(a),
eps = 20,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(sarea))
kdepredict <- mask(kdepredict, sarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
if(!(is.numeric(kdepredict)=="numeric")) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
}
else{vals=kdepredict}
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts.b=readOGR(shapefilepath)#,stringsAsFactors = FALSE)
# arc.check_product()
# permitpts = arc.open(shapefilepath)
# permitpts.a = arc.select(permitpts)
# permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
plot.time=function(){
tokmsq=1000000
plot.t=function(predpts,year){
# Get predictions after 2011
predpts.gt2009=subset(predpts,YEAR2==year)
predpts.gt2009@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kde=ptDensity(predpts.gt2009,studyarea)
return(kde*tokmsq)
}
set.panel()
par(mfrow=c(3,1),mai=c(0,0,0,.2),oma=c(0,0,0,4),bty="n")
# Create class breaks
blist=list()
valvec=vector("numeric")
for(i in c(2009,2012,2016)){
blist[[as.character(i)]]=plot.t(predpts,i)
#blist[[i]]
# tvals=values(blist[[i]])
# valvec=c(valvec,tvals)
}
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(10)
lablist=list()
lablist[['2009']]="A"
lablist[['2012']]="B"
lablist[['2016']]="C"
for(i in c('2009','2012','2016')){
#valvec=valvec[!is.na(valvec)]*tokmsq
#par(oma=c(0,0,0,4))
cintx=densBreaks(blist[[i]],9,'equal')
plot(blist[[i]], breaks=cintx$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
if(i==2009) scalebar(d = 5000, xy = c(358258.223,5033798.921), type = 'bar', divs = 2, below = 'm')
par(usr=c(0,1,0,1))
text(0.05,0.9,lablist[[i]],cex=2)
#set.panel(1,1)
#par(oma=c(0,0,0,1))
plot(
blist[[i]],
legend.only = TRUE,
add=TRUE,
breaks = round(cintx$brks,digits=0),
col = my.palette,
axes = FALSE,
legend.width = 1,
legend.shrink = 0.45,
horizontal = FALSE,
axis.args = list(cex.axis = 0.5),
legend.args = list(
text = expression(lambda*phantom(" ")(s[italic('x,y')] %.% km^-2)),
side = 4,
font = 2,
line = 2,
cex = 0.6
)
)
}
# Add legend
}
plot.time()
6/3.5
11/8.5
3.5*1.29
7/4
7/3
7/4.5
7/5
11/8.5
4*11/8.5
5.17/4
3/7
7/3
8.5*11
8.5/11
9*.7727
# makeplot
png("./figures/predovertime.png",units="in",width=7,height=9,res=300)
plot.time()
dev.off()
# makeplot
png("./figures/predovertime.png",units="in",width=6,height=9,res=300)
plot.time()
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("c:/programdata/anaconda3/python.exe")
predex=read.csv("F:/models/fullres_replicate_onesonly_6f.csv)
predex=read.csv("F:/models/fullres_replicate_onesonly_6f.csv")
head(predex)
length(predex)
predex=read.csv("F:/models/fullres_replicate_onesonly_6f.csv")
predexspd = SpatialPointsDataFrame(cbind(x = as.numeric(predex$LONG), y = as.numeric(predex$LAT)), predex)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(spd) = cr
predex=read.csv("F:/models/fullres_replicate_onesonly_6f.csv")
predexspd = SpatialPointsDataFrame(cbind(x = as.numeric(predex$LONG), y = as.numeric(predex$LAT)), predex)
predexspd
predex=read.csv("F:/models/fullres_replicate_onesonly_6f.csv")
predexspd = SpatialPointsDataFrame(cbind(x = as.numeric(predex$LONG), y = as.numeric(predex$LAT)), predex)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(predexspd) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
spd = spTransform(predexspd, cr)
plot(spd)
predex=read.csv("F:/models/fullres_replicate_onesonly_6f.csv")
predexspd = SpatialPointsDataFrame(cbind(x = as.numeric(predex$LONG), y = as.numeric(predex$LAT)), predex)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(predexspd) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
predexspd = spTransform(predexspd, cr)
plot.comparemodel(kdepredict,predexspd,my.palette)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("c:/programdata/anaconda3/python.exe")
library(spatstat)
library(maptools)
library(stringr)
library(raster)
library(dplyr)
library(classInt)
library(rgdal)
library(fields)
ptDensity = function(a, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(a),
eps = 200,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(sarea))
kdepredict <- mask(kdepredict, sarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
if(!(is.numeric(kdepredict)=="numeric")) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
}
else{vals=kdepredict}
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts.b=readOGR(shapefilepath)#,stringsAsFactors = FALSE)
# arc.check_product()
# permitpts = arc.open(shapefilepath)
# permitpts.a = arc.select(permitpts)
# permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
# Get training data list
x = read.delim("./rproject/retrain.txt",sep = " ",header = FALSE)
ll = lapply(str_split(x[, 1], "/"), function(x)
x[4])
yy = unlist(lapply(str_split(ll, ","), function(x)
x[1]))
xx = unlist(lapply(str_split(ll, ","), function(x)
x[2]))
yy = unlist(lapply(str_split(yy, "new-"), function(x) {
if (length(x) == 2) {
x[2]
}
else{
x[1]
}
}))
# Check for NA
yy[is.na(as.numeric(yy))]
xx = unlist(lapply(str_split(xx, "new-"), function(x) {
if (length(x) == 2) {
x[2]
}
else{
x[1]
}
}))
# Check for NA
xx[is.na(as.numeric(xx))]
# put x,y into x dataframe for coordinates of each pair
x$Long = xx
x$Lat = yy
x = x[which(x$V3 != "np"),]
x = x[which(x$V3 != "nof"),]
# Remove nonused levels of factors (3 or 4 bad rows)
x = droplevels(x)
#
# Make spdf of training data duels file
spd = SpatialPointsDataFrame(cbind(x = as.numeric(x$Long), y = as.numeric(x$Lat)), x)
# Assign NAD83
srNAD83= CRS("+init=epsg:4269")
proj4string(spd) = srNAD83
# Reproject to MTM9 NAD83
srMTM9 = CRS("+init=epsg:32189")
spd = spTransform(spd, srMTM9)
# Make unique point file for probabilities
#spdU=remove.duplicates(spd)
# Open study area mask, convert to spdf and reproject to MTM9
m4 = openSPDF(shapefilepath = './shapefiles/core_multi.shp')
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
options(stringsAsFactors = FALSE)
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
predpts@data$YEAR1=as.numeric(predpts@data$YEAR1)
predpts@data$YEAR2=as.numeric(predpts@data$YEAR2)
predpts@data$PRED=as.numeric(predpts@data$PRED)
options(stringsAsFactors = TRUE)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
outercore=openSPDF(shapefilepath = './shapefiles/outercore.shp')
kde.training = ptDensity(spd,outercore)
spd.yes=subset(spd,V3==1)
spd.no=subset(spd,V3==0)
kde.training.yes = ptDensity(spd.yes,outercore)
kde.training.no = ptDensity(spd.no,outercore)
# Create class breaks
cint=densBreaks(kde.training,9,'kmeans')
cint2=densBreaks(kde.training.yes,9,'kmeans')
cint3=densBreaks(kde.training.no,9,'kmeans')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
#windows(width=8,height=11,xpinch=300,ypinch=300)
par(mfrow=c(3,1),mai=c(0,0,0,0),bty="n")
p.plot=function(tras,cbreaks,outercore,letter){
plot(tras, breaks=cbreaks$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.1,0.9,letter,cex=2)
}
p.plot(kde.training,cint,outercore,"A")
p.plot(kde.training.yes,cint2,outercore,"B")
p.plot(kde.training.no,cint3,outercore,"C")
# makeplot
png("./figures/KDE_TRAINING_DISTRIB.png",units="in",width=7,height=12,res=300)
par(mfrow=c(3,1),mai=c(0.1,0,0.1,0),bty="n")
p.plot(kde.training,cint,outercore,"A")
p.plot(kde.training.yes,cint2,outercore,"B")
p.plot(kde.training.no,cint3,outercore,"C")
dev.off()
# Get GSV date list
x = read.delim("./rproject/GSVDATESSPAN.csv",sep = ",",header = FALSE)
names(x)=c("LAT","LONG","OLDEST","YOUNGEST","SPAN")
# Make spdf of training data duels file
gsvdates = SpatialPointsDataFrame(cbind(x = x$LONG, y = x$LAT), x)
# Assign NAD83
srNAD83 = CRS("+init=epsg:4269")
proj4string(gsvdates) = srNAD83
# Reproject to MTM9 NAD83
srMTM9 = CRS("+init=epsg:32189")
gsvdates = spTransform(gsvdates, srMTM9)
#win.graph(8.5,11)
par(mfrow=c(5,2),mai=c(0,0,0,0),bty="n")
for(i in seq(2007,2016,1)){
y2007=subset(gsvdates,OLDEST==i)
plot(studyarea)
plot(y2007,pch=16,cex=0.5,add=TRUE)
#plot(studyarea,add=TRUE)
par(usr=c(0,1,0,1))
text(0.1,0.9,i,cex=2)
}
hist(gsvdates$OLDEST,xlab="Date",ylab="Number of GSV locations",main="")
# Get predictions after 2011
predpts.gt2011=subset(predpts,YEAR2>=2011)
permits@bbox=studyarea@bbox
predpts.gt2011@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts.gt2011,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(10)
plot.comparemodel=function(kdepredict,kdepermits,my.palette){
set.panel()
par(mfrow=c(1,2),mai=c(0,0,0,0),oma=c(0,0,0,4),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
scalebar(d = 5000, xy = c(358258.223,5033798.921), type = 'bar', divs = 2, below = 'm')
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=2)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=2)
# Add legend
set.panel(1,1)
par(oma=c(0,0,0,1))
tokmsq=1000^2
r.range <- c(minValue(kdepredict), maxValue(kdepredict))*tokmsq
plot(
kdepredict,
legend.only = TRUE,
breaks = round(cint$brks*tokmsq,digits=0),
col = my.palette,
axes = FALSE,
legend.width = 1,
legend.shrink = 0.45,
horizontal = FALSE,
axis.args = list(cex.axis = 0.5),
legend.args = list(
text = expression(lambda*phantom(" ")(s[italic('x,y')] %.% km^-2)),
side = 4,
font = 2,
line = 2,
cex = 0.6
)
)
}
plot.comparemodel(kdepredict,kdepermits,my.palette)
set.panel()
plot.time=function(){
tokmsq=1000000
plot.t=function(predpts,year){
# Get predictions
predpts.gt2009=subset(predpts,YEAR2==year)
predpts.gt2009@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kde=ptDensity(predpts.gt2009,studyarea)
return(kde*tokmsq)
}
par(mfrow=c(3,1),mai=c(0,0,0,.2),oma=c(0,0,0,4),bty="n")
# Create class breaks
blist=list()
valvec=vector("numeric")
for(i in c(2009,2012,2016)){
blist[[as.character(i)]]=plot.t(predpts,i)
#blist[[i]]
# tvals=values(blist[[i]])
# valvec=c(valvec,tvals)
}
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(10)
lablist=list()
lablist[['2009']]="A"
lablist[['2012']]="B"
lablist[['2016']]="C"
for(i in c('2009','2012','2016')){
#valvec=valvec[!is.na(valvec)]*tokmsq
#par(oma=c(0,0,0,4))
cintx=densBreaks(blist[[i]],9,'equal')
plot(blist[[i]], breaks=cintx$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
if(i==2009) scalebar(d = 5000, xy = c(358258.223,5033798.921), type = 'bar', divs = 2, below = 'm')
par(usr=c(0,1,0,1))
text(0.05,0.9,lablist[[i]],cex=2)
#set.panel(1,1)
#par(oma=c(0,0,0,1))
plot(
blist[[i]],
legend.only = TRUE,
add=TRUE,
breaks = round(cintx$brks,digits=0),
col = my.palette,
axes = FALSE,
legend.width = 1,
legend.shrink = 0.45,
horizontal = FALSE,
axis.args = list(cex.axis = 0.5),
legend.args = list(
text = expression(lambda*phantom(" ")(s[italic('x,y')] %.% km^-2)),
side = 4,
font = 2,
line = 2,
cex = 0.6
)
)
}
# Add legend
}
plot.time()
# makeplot
png("./figures/predovertime.png",units="in",width=6,height=9,res=300)
plot.time()
dev.off()
predex=read.csv("F:/models/fullres_replicate_onesonly_6f.csv")
predexspd = SpatialPointsDataFrame(cbind(x = as.numeric(predex$LONG), y = as.numeric(predex$LAT)), predex)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(predexspd) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
predexspd = spTransform(predexspd, cr)
plot.comparemodel(kdepredict,predexspd,my.palette)
predex=read.csv("F:/models/fullres_replicate_onesonly_6f.csv")
predexspd = SpatialPointsDataFrame(cbind(x = as.numeric(predex$LONG), y = as.numeric(predex$LAT)), predex)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(predexspd) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
predexspd = spTransform(predexspd, cr)
predexkde=ptDensity(predexspd,studyarea)
plot.comparemodel(kdepredict,predexkde,my.palette)
predex=read.csv("F:/models/fullres_replicate_onesonly_6f.csv")
predexspd = SpatialPointsDataFrame(cbind(x = as.numeric(predex$LONG), y = as.numeric(predex$LAT)), predex)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(predexspd) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
predexspd = spTransform(predexspd, cr)
predexkde=ptDensity(predexspd,studyarea)
cint=densBreaks(predexkde,9,'equal')
plot.comparemodel(kdepredict,predexkde,my.palette)

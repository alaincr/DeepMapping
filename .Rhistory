xx = unlist(lapply(str_split(xx, "new-"), function(x) {
if (length(x) == 2) {
x[2]
}
else{
x[1]
}
}))
# Check for NA
xx[is.na(as.numeric(xx))]
# put x,y into x dataframe for coordinates of each pair
x$Long = xx
x$Lat = yy
x = x[which(x$V3 != "np"),]
x = x[which(x$V3 != "nof"),]
# Remove nonused levels of factors
x = droplevels(x)
#
# Make spdf of training data duels file
spd = SpatialPointsDataFrame(cbind(x = as.numeric(x$Long), y = as.numeric(x$Lat)), x)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(spd) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
spd = spTransform(spd, cr)
# Make unique point file for probabilities
#spdU=remove.duplicates(spd)
# Open study area mask, convert to spdf and reproject to MTM9
m = arc.open('./shapefiles/core_multi.shp')
m2 = arc.select(m)
m3 = arc.data2sp(m2)
m4 = spTransform(m3, CRS(proj4string(spd)))
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(spd),
eps = 80,
kernel = 'quartic',
sigma = 750)
kde = raster(kde)
# Extract probabilities from KDE surface
probs = extract(kde, spd)
# Add the raster probabilities to spdf after standardizing and inverting
probs[is.na(probs)]=0
maxv = max(probs, na.rm = TRUE)
minv = min(probs, na.rm = TRUE)
probs=1 - (probs - minv) / (maxv - minv)
spd@data$RASTERVALU=probs
#
# Crop and mask raster to study area
r2 <- crop(kde, extent(m4))
r3 <- mask(r2, m4)
# Plot raster
plot(r3)
plot(m3, add = TRUE, lwd = 2)
# Create a thinned dataset
idx=1:length(spd@data$RASTERVALU)
ytest=sample(idx,600, replace = FALSE, prob = spd@data$RASTERVALU/sum(spd@data$RASTERVALU))
plot(spd@data$Long,spd@data$Lat,pch=16)
x=spd@data$Long[ytest]
y=spd@data$Lat[ytest]
points(x,y,col=2)
pts=spd[ytest,]
kde=density.ppp(as.ppp(pts),eps = 80,
kernel = 'quartic',
sigma = 750)
kde=raster(kde)
r2 <- crop(kde, extent(m4))
r3 <- mask(r2, m4)
plot(r3)
plot(spd[ytest,],add=TRUE,col=2,pch=16)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
length(vals)
?classIntervals
cint = classIntervals(vals,n=9,style='equal')
cint
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "OrRd")
plot(r3, breaks=cint,col = my.palette)
install.packages('RColorBrewer')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "OrRd")
plot(r3, breaks=cint,col = my.palette)
plot(r3, breaks=cint$brks,col = my.palette)
knitr::opts_chunk$set(echo = TRUE)
m = arc.open('./shapefiles/predicted.shp')
m2 = arc.select(m)
m3 = arc.data2sp(m2)
m4 = spTransform(m3, CRS(proj4string(spd)))
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(m4),
eps = 80,
kernel = 'quartic',
sigma = 750)
kde = raster(kde)
plot(kde)
m = arc.open('./shapefiles/predicted.shp')
m2 = arc.select(m)
m3 = arc.data2sp(m2)
m4 = spTransform(m3, CRS(proj4string(spd)))
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(m4),
eps = 80,
kernel = 'quartic',
sigma = 750)
kde = raster(kde)
r2 <- crop(kde, extent(m4))
r3 <- mask(r2, m4)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "OrRd")
plot(r3, breaks=cint$brks,col = my.palette)
plot(r3, breaks=cint$brks,col = my.palette)
plot(r3)
plot(kde)
plot(m4)
predictedpoints = arc.open('./shapefiles/predicted.shp')
predictedpoints.a = arc.select(predictedpoints)
predictedpoints.b = arc.data2sp(predictedpoints.a)
predpts = spTransform(predictedpoints.b, CRS(proj4string(spd)))
masklyr = arc.open('./shapefiles/core_multi.shp')
masklyr.a = arc.select(masklyr)
masklyr.b = arc.data2sp(masklyr.a)
studyarea = spTransform(masklyr.b, CRS(proj4string(spd)))
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 80,
kernel = 'quartic',
sigma = 750)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "OrRd")
plot(r3, breaks=cint$brks,col = my.palette)
plot(r3, breaks=cint$brks,col = my.palette)
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 50,
kernel = 'quartic',
sigma = 750)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "OrRd")
plot(r3, breaks=cint$brks,col = my.palette)
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 50,
kernel = 'quartic',
sigma = 350)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "OrRd")
plot(r3, breaks=cint$brks,col = my.palette)
?density.ppp
kde = density.ppp(as.ppp(predpts),
eps = 50,
kernel = 'gaussian',
sigma = 350)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "OrRd")
plot(r3, breaks=cint$brks,col = my.palette)
hoods = arc.open('./shapefiles/core.shp')
hoods.a = arc.select(hoods)
hoods.b = arc.data2sp(hoods.a)
nbrhoods = spTransform(hoods.b, CRS(proj4string(spd)))
plot(nbrhoods,add=TRUE)
kde = density.ppp(as.ppp(predpts),
eps = 50,
kernel = 'gaussian',
sigma = 750)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "OrRd")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 50,
kernel = 'gaussian',
sigma = 300)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "OrRd")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
?RColorBrewer
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "Blues")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 50,
kernel = 'gaussian',
sigma = 200)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 50,
kernel = 'gaussian',
sigma = 250)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 50,
kernel = 'quartic',
sigma = 250)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 50,
kernel = 'quartic',
sigma = 300)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
?density.ppp
bw.diggle(as.ppp(predpts))
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 40,
kernel = 'quartic',
sigma = 8.17)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
kde = density.ppp(as.ppp(predpts),
eps = 40,
kernel = 'quartic',
sigma = 400)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
kde = density.ppp(as.ppp(predpts),
eps = 40,
kernel = 'quartic',
sigma = 300)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
cint = classIntervals(vals,n=9,style='quantile')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
?classIntervals
cint = classIntervals(vals,n=9,style='kmeans')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
cint = classIntervals(vals,n=9,style='fisher')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
kde = density.ppp(as.ppp(predpts),
eps = 40,
kernel = 'bclust',
sigma = 300)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='fisher')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
kde = density.ppp(as.ppp(predpts),
eps = 40,
kernel = 'quartic',
sigma = 300)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='bclust')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
cint = classIntervals(vals,n=9,style='hclust')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
cint = classIntervals(vals,n=9,style='pretty')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
cint
my.palette <- brewer.pal(n = 15, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
cint = classIntervals(vals,n=15,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 15, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
kde = density.ppp(as.ppp(predpts),
eps = 40,
kernel = 'quartic',
sigma = 200)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
kde = density.ppp(as.ppp(predpts),
eps = 20,
kernel = 'quartic',
sigma = 200)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
library(RColorBrewer)
my.palette <- brewer.pal(n = 9, name = "PuBu")
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
display.brewer.all(type="seq")
devAskNewPage(ask=TRUE)
display.brewer.all(type="seq")
my.palette <- brewer.pal(n = 9, name = "Blues")
plot(r3, breaks=cint$brks,col = my.palette)
?colorRampPalette
?rgb
colorRampPalette(c(rgb(0,0,1,1), rgb(0,0,1,0)), alpha = TRUE)(8)
colorRampPalette(c(rgb(0,0,1,1), rgb(0,0,1,0)), alpha = TRUE)(9)
my.palette=colorRampPalette(c(rgb(0,0,1,1), rgb(0,0,1,0)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
my.palette=colorRampPalette(c(rgb(211,239,232,1), rgb(46,100,140,0)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
?rgb
col2hex(rgb(211,239,232,1))
my.palette <- brewer.pal(n = 9, name = "Blues")
my.palette=colorRampPalette(c(rgb(211/255,239/255,232/255,1), rgb(46/255,100/255,140/255,0)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
my.palette=colorRampPalette(c(rgb(211/255,239/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
plot(nbrhoods,add=TRUE,col=1)
plot(nbrhoods,add=TRUE)
my.palette=colorRampPalette(c(rgb(211/255,239/255,252/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,0), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,.5), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
install.packages("ggmap")
library(ggmap)
gmap("ottawa")
qmap("ottawa")
plot(nbrhoods,add=TRUE)
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
# Calculate KDE on training locations & convert to raster obj
kde = density.ppp(as.ppp(predpts),
eps = 20,
kernel = 'gaussian',
sigma = 200)
kde = raster(kde)
r2 <- crop(kde, extent(studyarea))
r3 <- mask(r2, studyarea)
library(classInt)
vals=values(r3)
vals=vals[!is.na(vals)]
cint = classIntervals(vals,n=9,style='equal')
# library(RColorBrewer)
# my.palette <- brewer.pal(n = 9, name = "Blues")
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
plot(r3, breaks=cint$brks,col = my.palette)
plot(nbrhoods,add=TRUE)
?density.ppp

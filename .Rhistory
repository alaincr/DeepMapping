p>=2011
head(predpts@data)
p = predpts[predpts$YEAR2>=2011]
?subset
p=subset(predpts,YEAR2>=2011)
p
predpts
View(p)
View(p)
View(p)
p
summary(p$YEAR2)
which(predpts$YEAR2==2011)
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
graphics.off()
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
# makeplot
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
ptDensity = function(predpts, sarea) {
# Calculate KDE on training locations & convert to raster obj
kdepredict = density.ppp(as.ppp(predpts),
eps = 10,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
version
memory.limit(size=56000)
?memory.limit
memory.size()
library(spatstat)
library(maptools)
library(stringr)
library(raster)
library(dplyr)
library(classInt)
library(arcgisbinding)
arc.check_product()
knitr::opts_chunk$set(echo = TRUE)
ptDensity = function(predpts, sarea) {
# Calculate KDE on training locations & convert to raster obj
kdepredict = density.ppp(as.ppp(predpts),
eps = 10,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
?spatstat
citation("spatstat")
version("spatstat")
sessionInfo()
install.packages(c("backports", "BH", "bindr", "bindrcpp", "bmp", "caTools", "curl", "data.table", "DBI", "deldir", "devtools", "DiagrammeR", "digest", "doParallel", "dplyr", "drat", "evaluate", "foreach", "ggplot2", "git2r", "glue", "googleway", "gridExtra", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "munsell", "NMF", "openssl", "pkgmaker", "plogr", "polyclip", "profvis", "psych", "purrr", "R.oo", "R6", "Rcpp", "readbitmap", "registry", "reshape2", "rgdal", "rlang", "rmarkdown", "rngtools", "roxygen2", "rprojroot", "rstudioapi", "scales", "shiny", "sourcetools", "sp", "spatstat", "spatstat.utils", "stringi", "stringr", "tibble", "viridis", "viridisLite", "visNetwork", "withr", "XML", "yaml"))
install.packages(c("backports", "BH", "bindr", "bindrcpp", "bmp", "caTools", "curl", "data.table", "DBI", "deldir", "devtools", "DiagrammeR", "digest", "doParallel", "dplyr", "drat", "evaluate", "foreach", "ggplot2", "git2r", "glue", "googleway", "gridExtra", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "munsell", "NMF", "openssl", "pkgmaker", "plogr", "polyclip", "profvis", "psych", "purrr", "R.oo", "R6", "Rcpp", "readbitmap", "registry", "reshape2", "rgdal", "rlang", "rmarkdown", "rngtools", "roxygen2", "rprojroot", "rstudioapi", "scales", "shiny", "sourcetools", "sp", "spatstat", "spatstat.utils", "stringi", "stringr", "tibble", "viridis", "viridisLite", "visNetwork", "withr", "XML", "yaml"))
install.packages(c("backports", "BH", "bindr", "bindrcpp", "bmp", "caTools", "curl", "data.table", "DBI", "deldir", "devtools", "DiagrammeR", "digest", "doParallel", "dplyr", "drat", "evaluate", "foreach", "ggplot2", "git2r", "glue", "googleway", "gridExtra", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "munsell", "NMF", "openssl", "pkgmaker", "plogr", "polyclip", "profvis", "psych", "purrr", "R.oo", "R6", "Rcpp", "readbitmap", "registry", "reshape2", "rgdal", "rlang", "rmarkdown", "rngtools", "roxygen2", "rprojroot", "rstudioapi", "scales", "shiny", "sourcetools", "sp", "spatstat", "spatstat.utils", "stringi", "stringr", "tibble", "viridis", "viridisLite", "visNetwork", "withr", "XML", "yaml"))
install.packages(c("backports", "BH", "bindr", "bindrcpp", "bmp", "caTools", "curl", "data.table", "DBI", "deldir", "devtools", "DiagrammeR", "digest", "doParallel", "dplyr", "drat", "evaluate", "foreach", "ggplot2", "git2r", "glue", "googleway", "gridExtra", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "munsell", "NMF", "openssl", "pkgmaker", "plogr", "polyclip", "profvis", "psych", "purrr", "R.oo", "R6", "Rcpp", "readbitmap", "registry", "reshape2", "rgdal", "rlang", "rmarkdown", "rngtools", "roxygen2", "rprojroot", "rstudioapi", "scales", "shiny", "sourcetools", "sp", "spatstat", "spatstat.utils", "stringi", "stringr", "tibble", "viridis", "viridisLite", "visNetwork", "withr", "XML", "yaml"))
knitr::opts_chunk$set(echo = TRUE)
# Get GSV date list
x = read.delim("./rproject/GSVDATESSPAN.csv",sep = ",",header = FALSE)
names(x)="LAT,LONG,OLDEST,YOUNGEST,SPAN"
head(x)
# Get GSV date list
x = read.delim("./rproject/GSVDATESSPAN.csv",sep = ",",header = FALSE)
names(x)=c("LAT","LONG","OLDEST","YOUNGEST","SPAN")
head(x)
gsvdates = SpatialPointsDataFrame(cbind(x = as.numeric(x$Long), y = as.numeric(x$Lat)), x)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(gsvdates) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
spd = spTransform(gsvdates, cr)
gsvdates = SpatialPointsDataFrame(cbind(x = x$Long, y = x$Lat), x)
library(spatstat)
library(maptools)
library(stringr)
library(raster)
x = read.delim("./rproject/GSVDATESSPAN.csv",sep = ",",header = FALSE)
names(x)=c("LAT","LONG","OLDEST","YOUNGEST","SPAN")
# Make spdf of training data duels file
gsvdates = SpatialPointsDataFrame(cbind(x = x$Long, y = x$Lat), x)
cbind(x = x$Long, y = x$Lat)
# Get GSV date list
x = read.delim("./rproject/GSVDATESSPAN.csv",sep = ",",header = FALSE)
names(x)=c("LAT","LONG","OLDEST","YOUNGEST","SPAN")
# Make spdf of training data duels file
gsvdates = SpatialPointsDataFrame(cbind(x = x$LONG, y = x$LAT), x)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(gsvdates) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
spd = spTransform(gsvdates, cr)
spplot(x,"OLDEST")
# Get GSV date list
x = read.delim("./rproject/GSVDATESSPAN.csv",sep = ",",header = FALSE)
names(x)=c("LAT","LONG","OLDEST","YOUNGEST","SPAN")
# Make spdf of training data duels file
gsvdates = SpatialPointsDataFrame(cbind(x = x$LONG, y = x$LAT), x)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(gsvdates) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
gsvdates = spTransform(gsvdates, cr)
spplot(gsvdates)
knitr::opts_chunk$set(echo = TRUE)
library(spatstat)
library(maptools)
library(stringr)
library(raster)
# Get GSV date list
x = read.delim("./rproject/GSVDATESSPAN.csv",sep = ",",header = FALSE)
names(x)=c("LAT","LONG","OLDEST","YOUNGEST","SPAN")
# Make spdf of training data duels file
gsvdates = SpatialPointsDataFrame(cbind(x = x$LONG, y = x$LAT), x)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(gsvdates) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
gsvdates = spTransform(gsvdates, cr)
gsvdates
summary(gsvdates)
?spplot
spplot(gsvdates,c("OLDEST"))
y2007=subset(predpts,OLDEST==2011)
y2007=subset(gsvdates,OLDEST==2011)
summary(y2007)
hist(gsvdates$OLDEST)
plot(y2007)
summary(y2007)
y2007=subset(gsvdates,OLDEST==2007)
summary(y2007)
plot(y2007)
hist(y2007$OLDEST,xlab="Date",ylab="Frequency")
hist(y2007$OLDEST,xlab="Date",ylab="Frequency")
hist(y2007$OLDEST,xlab="Date",ylab="Frequency",main="")
hist(y2007$OLDEST,xlab="Date",ylab="Frequency",main="")
y2007$OLDEST
hist(gsvdates$OLDEST,xlab="Date",ylab="Frequency",main="")
hist(gsvdates$OLDEST,xlab="Date",ylab="Frequency",main="")
unlink('sampling_cache', recursive = TRUE)
install.packages("reticulate")
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
install.packages("yaml")
install.packages("stringr")
install.packages("maptools")
install.packages("rgdal")
install.packages("raster")
install.pakcages("dplyr")
install.packages("dplyr")
install.packages("classInt")
install.packages("sp")
install.packages("yaml")
install.packages("retuculate")
install.packages("stringi")
install.packages("stringi")
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
ptDensity = function(predpts, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(predpts),
eps = 10,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
library(spatstat)
library(maptools)
library(stringr)
library(raster)
library(dplyr)
library(classInt)
library(arcgisbinding)
arc.check_product()
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
#windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
ptDensity = function(predpts, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(predpts),
eps = 100,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
unlink('sampling_cache', recursive = TRUE)
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
knitr::opts_chunk$set(echo = TRUE)
ptDensity = function(predpts, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(predpts),
eps = 100,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
library(spatstat)
library(maptools)
library(stringr)
library(raster)
library(dplyr)
library(classInt)
library(arcgisbinding)
arc.check_product()
unlink('sampling_cache', recursive = TRUE)

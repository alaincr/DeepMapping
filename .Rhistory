"F:/ottawa_image_db/45.368548,-75.779295",
"F:/ottawa_image_db/45.391854,-75.759665",
"F:/ottawa_image_db/45.440927,-75.671258",
"F:/ottawa_image_db/45.405719,-75.726039",
"F:/ottawa_image_db/45.381848,-75.760526",
"F:/ottawa_image_db/45.412198,-75.674896")#,
#         "F:/ottawa_image_db/45.362226,-75.784759"       "F:/ottawa_image_db/45.391192,-75.745004","F:/ottawa_image_db/45.348997,-75.712858","F:/ottawa_image_db/45.348013,-75.743336","F:/ottawa_image_db/45.399765,-75.756267",
#"F:/ottawa_image_db/45.398931,-75.756158")
# dlist=c("F:/ottawa_image_db/45.405719,-75.726039")
# dlist=c("F:/ottawa_image_db/45.369725,-75.628113")
# dlist=c("F:/ottawa_image_db/45.362226,-75.784759")
#F:\ottawa_image_db\45.368548,-75.779295,F:\ottawa_image_db\45.367637,-75.778784,F:\ottawa_image_db\45.397599,-75.754770,F:\ottawa_image_db\45.397651,-75.754588 F:/ottawa_image_db/45.385800,-75.746943
par(mfrow = c(11, 6), mai = c(0, .2, .2, 0))
crow=1
for(k in dlist) {
curd = strsplit(dlist[crow], "/")[[1]][3]
ss = subset(predpts, DIRNAME == curd)
lf = list.files(dlist[crow],
full.names = F,
pattern = "\\.jpg$")
tst = vector("character")
for (i in lf) {
tst = c(tst, strsplit(i, "_")[[1]][1])
}
# tst = data.frame(allyears = tst)
# ssdf = data.frame(allyears = c(ss@data$YEAR1[1], ss@data$YEAR2))
allyears = as.character(ss@data$YEAR2)
print(allyears)
par(mfg=c(crow,1))
pcount=1
for (i in lf) {
j1 = load.image(paste(dlist[crow], "/", i, sep = ""))
plot(j1, axes = F)
if (pcount == 1){
par(las=1)
mtext(paste("(", letters[crow], ")"), 2, crt = 90)#mtext("(a)",3)
par(las=0)
}
tt = strsplit(i, "_")[[1]][1]
mtext(tt, 3)
if (tt %in% allyears) {
par(las=1)
mtext("\u275A", 2,cex=2)#expression(bold(Delta))"\u26AB"
par(las=0)
}
pcount = pcount + 1
}
plot(studyarea)
xy=strsplit(strsplit(k,'/')[[1]][3],",")
xy=SpatialPoints(cbind(x=as.numeric(xy[[1]][2]),y=as.numeric(xy[[1]][1])),proj4string=srNAD83)
xy=spTransform(xy,srMTM9)
plot(xy,pch=16,col=2,add=TRUE)
crow=crow+1
}
}
plotexamples()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
knitr::knit_engines$set(python = reticulate::eng_python)
use_python("c:/programdata/anaconda3/python.exe")
library(spatstat)
library(maptools)
library(stringr)
library(raster)
library(dplyr)
library(classInt)
library(rgdal)
library(fields)
library(Hmisc)
library(RColorBrewer)
ptDensity = function(a, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(a),
eps = 200,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(sarea))
kdepredict <- raster::mask(kdepredict, sarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
if(!(is.numeric(kdepredict)=="numeric")) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
}
else{vals=kdepredict}
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts.b=readOGR(shapefilepath)#,stringsAsFactors = FALSE)
# arc.check_product()
permits = spTransform(permitpts.b, outCS)
return(permits)
}
# Get training data list
x = read.delim("./rproject/retrain.txt",sep = " ",header = FALSE)
ll = lapply(str_split(x[, 1], "/"), function(x)
x[4])
yy = unlist(lapply(str_split(ll, ","), function(x)
x[1]))
xx = unlist(lapply(str_split(ll, ","), function(x)
x[2]))
yy = unlist(lapply(str_split(yy, "new-"), function(x) {
if (length(x) == 2) {
x[2]
}
else{
x[1]
}
}))
# Check for NA
yy[is.na(as.numeric(yy))]
xx = unlist(lapply(str_split(xx, "new-"), function(x) {
if (length(x) == 2) {
x[2]
}
else{
x[1]
}
}))
# Check for NA
xx[is.na(as.numeric(xx))]
# put x,y into x dataframe for coordinates of each pair
x$Long = xx
x$Lat = yy
x = x[which(x$V3 != "np"),]
x = x[which(x$V3 != "nof"),]
# Remove nonused levels of factors (3 or 4 bad rows)
x = droplevels(x)
#
# Make spdf of training data duels file
spd = SpatialPointsDataFrame(cbind(x = as.numeric(x$Long), y = as.numeric(x$Lat)), x)
# Assign NAD83
srNAD83= CRS("+init=epsg:4269")
proj4string(spd) = srNAD83
# Reproject to MTM9 NAD83
srMTM9 = CRS("+init=epsg:32189")
spd = spTransform(spd, srMTM9)
# Read in the replicated model run
x1=read.csv("./rproject/fullres_replicate.csv")
x1=x1[x1$PRED==1,]
spdrep = SpatialPointsDataFrame(cbind(x = as.numeric(x1$LONG), y = as.numeric(x1$LAT)), x1)
# Assign NAD83
srNAD83= CRS("+init=epsg:4269")
proj4string(spdrep) = srNAD83
# Reproject to MTM9 NAD83
srMTM9 = CRS("+init=epsg:32189")
spdrep = spTransform(spdrep, srMTM9)
# Read in the original model run
xo=read.csv("./rproject/fullres.csv")
xo=xo[xo$PRED==1,]
spdo = SpatialPointsDataFrame(cbind(x = as.numeric(xo$LONG), y = as.numeric(xo$LAT)), xo)
# Assign NAD83
srNAD83= CRS("+init=epsg:4269")
proj4string(spdo) = srNAD83
# Reproject to MTM9 NAD83
srMTM9 = CRS("+init=epsg:32189")
spdo = spTransform(spdo, srMTM9)
# Make unique point file for probabilities
#spdU=remove.duplicates(spd)
# Open study area mask, convert to spdf and reproject to MTM9
m4 = openSPDF(shapefilepath = './shapefiles/core_multi.shp')
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
options(stringsAsFactors = FALSE)
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
predpts@data$YEAR1=as.numeric(predpts@data$YEAR1)
predpts@data$YEAR2=as.numeric(predpts@data$YEAR2)
predpts@data$PRED=as.numeric(predpts@data$PRED)
options(stringsAsFactors = TRUE)
predptso=predpts
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
ons=openSPDF(shapefilepath='./shapefiles/ONSNeighbourhoods2012_SmallFile.shp')
outercore=openSPDF(shapefilepath = './shapefiles/outercore.shp')
kde.training = ptDensity(spd,outercore)
spd.yes=subset(spd,V3==1)
spd.no=subset(spd,V3==0)
kde.training.yes = ptDensity(spd.yes,outercore)
kde.training.no = ptDensity(spd.no,outercore)
# makeplot
#windows(width=8,height=11,xpinch=300,ypinch=300)
# Create class breaks
clstype="equal"
cint=densBreaks(kde.training,9,clstype)
cint2=densBreaks(kde.training.yes,9,clstype)
cint3=densBreaks(kde.training.no,9,clstype)
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
p.plot=function(tras,cbreaks,outercore,letter,pk){
tokmsq=1000^2
my.palette=brewer.pal(9,'Reds')#colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(10)
#par(mfg=c(1,1))
#par(oma=c(0,0,0,4))
plot(tras, breaks=cbreaks$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
if(pk==1) scalebar(d = 5000, xy = c(357258.223,5033798.921), type = 'bar', divs = 2, below = 'm')
#set.panel(1,1)
par(usr=c(0,1,0,1))
#par(mfg=c(1,1))
#par(oma=c(0,0,0,1))
plot(
tras,
add=TRUE,
legend.only = TRUE,
breaks = round(cbreaks$brks*tokmsq,digits=0),
col = my.palette,
axes = FALSE,
legend.width = 1,
legend.shrink = 0.45,
horizontal = FALSE,
axis.args = list(cex.axis = 0.5),
legend.args = list(
text = expression(lambda*phantom(" ")(s[italic('x,y')] %.% km^-2)),
side = 4,
font = 2,
line = 2,
cex = 0.6
)
)
#par(usr=c(0,1,0,1))
text(0.1,0.9,letter,cex=2)
}
par(mfrow=c(3,1),mai=c(0,0,0,0),bty="n")
par(mfg=c(1,1))
p.plot(kde.training,cint,outercore,"A",pk=1)
# par(bg=NA)
# subplot(function(){
#   plot(ons,col='grey',border='grey')
#   plot(outercore,col=1,border=1,add=T)
# },0.5,0.3,c(0.7,0.7))#353091.8,5027886)
#par(mfrow=c(3,1))#,mai=c(0,0,0,0),bty="n")
par(mfg=c(2,1))
p.plot(kde.training.yes,cint2,outercore,"B",pk=2)
#par(mfrow=c(3,1))#,mai=c(0,0,0,0),bty="n")
par(mfg=c(3,1))
p.plot(kde.training.no,cint3,outercore,"C",pk=3)
# makeplot
png("./figures/KDE_TRAINING_DISTRIB.png",units="in",width=7,height=12,res=300)
par(mfrow=c(3,1),mai=c(0.1,0,0.1,0),bty="n")
p.plot(kde.training,cint,outercore,"A",pk=1)
p.plot(kde.training.yes,cint2,outercore,"B",pk=2)
p.plot(kde.training.no,cint3,outercore,"C",pk=3)
dev.off()
# Get GSV date list
x = read.delim("./rproject/GSVDATESSPAN.csv",sep = ",",header = FALSE)
names(x)=c("LAT","LONG","OLDEST","YOUNGEST","SPAN")
# Make spdf of training data duels file
gsvdates = SpatialPointsDataFrame(cbind(x = x$LONG, y = x$LAT), x)
# Assign NAD83
srNAD83 = CRS("+init=epsg:4269")
proj4string(gsvdates) = srNAD83
# Reproject to MTM9 NAD83
srMTM9 = CRS("+init=epsg:32189")
gsvdates = spTransform(gsvdates, srMTM9)
#win.graph(8.5,11)
par(mfrow=c(5,2),mai=c(.2,0,0,0),bty="n")
for(i in seq(2007,2016,1)){
y2007=subset(gsvdates,OLDEST==i)
plot(studyarea)
plot(y2007,pch=16,cex=0.25,add=TRUE)
#plot(studyarea,add=TRUE)
par(usr=c(0,1,0,1))
text(0.1,0.9,i,cex=2)
}
hist(gsvdates$OLDEST,xlab="Date",ylab="Number of GSV locations",main="")
# Get predictions after 2011
predpts=remove.duplicates(predpts,remove.second = F)
predpts.gt2011=subset(predpts,YEAR2>=2011)
permits@bbox=studyarea@bbox
predpts.gt2011@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts.gt2011,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(10)
plot.comparemodel=function(kde1,kde2,plotintervals,colorpal,nbrpoly){
set.panel()
par(mfrow=c(1,2),mai=c(0,0,0,0),oma=c(0,0,0,4),bty="n")
plot(kde1, breaks=plotintervals$brks,col = colorpal,axes=FALSE,legend=FALSE)
plot(nbrpoly,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
scalebar(d = 5000,
xy = c(358258.223,5033798.921), type = 'bar', divs = 2, below = 'm')
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=2)
plot(kde2, breaks=plotintervals$brks,col = colorpal,axes=FALSE,legend=FALSE)
plot(nbrpoly,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=2)
# Add legend
set.panel(1,1)
par(oma=c(0,0,0,1))
tokmsq=1000^2
r.range <- c(minValue(kde1), maxValue(kde1))*tokmsq
plot(
kde1,
legend.only = TRUE,
breaks = round(plotintervals$brks*tokmsq,digits=0),
col = colorpal,
axes = FALSE,
legend.width = 1,
legend.shrink = 0.45,
horizontal = FALSE,
axis.args = list(cex.axis = 0.5),
legend.args = list(
text = expression(lambda*phantom(" ")(s[italic('x,y')] %.% km^-2)),
side = 4,
font = 2,
line = 2,
cex = 0.6
)
)
}
plot.comparemodel(kdepredict,kdepermits,cint,my.palette,nbrhoods)
# makeplot
png("./figures/figure_pred_vs_permit.png",units="in",width=11,height=4,res=300)
plot.comparemodel(kdepredict,kdepermits,cint,my.palette,nbrhoods)
dev.off()
set.panel()
plot.time=function(){
tokmsq=1000000
plot.t=function(predpts,year){
# Get predictions
predpts.gt2009=subset(predpts,YEAR2==year)
predpts.gt2009@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kde=ptDensity(predpts.gt2009,studyarea)
return(kde*tokmsq)
}
par(mfrow=c(3,1),mai=c(0,0,0,.2),oma=c(0,0,0,4),bty="n")
# Create class breaks
blist=list()
valvec=vector("numeric")
for(i in c(2009,2012,2016)){
blist[[as.character(i)]]=plot.t(predpts,i)
#blist[[i]]
# tvals=values(blist[[i]])
# valvec=c(valvec,tvals)
}
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(10)
lablist=list()
lablist[['2009']]="A"
lablist[['2012']]="B"
lablist[['2016']]="C"
for(i in c('2009','2012','2016')){
#valvec=valvec[!is.na(valvec)]*tokmsq
#par(oma=c(0,0,0,4))
cintx=densBreaks(blist[[i]],9,'equal')
plot(blist[[i]], breaks=cintx$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
if(i==2009) scalebar(d = 5000, xy = c(358258.223,5033798.921), type = 'bar', divs = 2, below = 'm')
par(usr=c(0,1,0,1))
text(0.05,0.9,lablist[[i]],cex=2)
#set.panel(1,1)
#par(oma=c(0,0,0,1))
plot(
blist[[i]],
legend.only = TRUE,
add=TRUE,
breaks = round(cintx$brks,digits=0),
col = my.palette,
axes = FALSE,
legend.width = 1,
legend.shrink = 0.45,
horizontal = FALSE,
axis.args = list(cex.axis = 0.5),
legend.args = list(
text = expression(lambda*phantom(" ")(s[italic('x,y')] %.% km^-2)),
side = 4,
font = 2,
line = 2,
cex = 0.6
)
)
}
# Add legend
}
plot.time()
# makeplot
png("./figures/predovertime.png",units="in",width=6,height=9,res=300)
plot.time()
dev.off()
predex=read.csv("./rproject/fullres_replicate_onesonly_6f.csv")
predexspd = SpatialPointsDataFrame(cbind(x = as.numeric(predex$LONG), y = as.numeric(predex$LAT)), predex)
# Assign NAD83
cr = CRS("+init=epsg:4269")
proj4string(predexspd) = cr
# Reproject to MTM9 NAD83
cr = CRS("+init=epsg:32189")
predexspd = spTransform(predexspd, cr)
predexspd@bbox=studyarea@bbox
predexkde=ptDensity(predexspd,studyarea)
cint=densBreaks(predexkde,9,'equal')
plot.comparemodel(kdepredict,predexkde,cint,my.palette,nbrhoods)
spdrep@bbox=studyarea@bbox
spdo@bbox=studyarea@bbox
kderun1=ptDensity(spdo,studyarea)
kderun2=ptDensity(spdrep,studyarea)
cintn=densBreaks(kderun2,9,'equal')
plot.comparemodel(kderun1,kderun2,cintn,my.palette,nbrhoods)
png("./figures/figure_run1_vs_run2.png",units="in",width=11,height=4,res=300)
plot.comparemodel(kderun1,kderun2,cintn,my.palette,nbrhoods)
dev.off()
library(imager)
#subtlechanges
#F:\ottawa_image_db\45.395218,-75.751936
#6 commercial fov change plus occulusion
#F:\ottawa_image_db\45.395869,-75.746973
#3 normal
#F:\ottawa_image_db\45.385107,-75.742958
#5 normal next-door + occulusion
#F:\ottawa_image_db\45.395435,-75.757202
#5 normal
#F:\ottawa_image_db\45.395583,-75.757286
#6 occulusion tree
#F:\ottawa_image_db\45.386234,-75.760761
#5 normal even with tree occulusion
#F:\ottawa_image_db\45.385075,-75.763422
#5 normal subtle landscaping of front
#F:\ottawa_image_db\45.387784,-75.759421
#6 landscaping front but for construction
#F:\ottawa_image_db\45.386081,-75.751291
#6 wrong picture indicating normal
#F:\ottawa_image_db\45.395496,-75.749797
#5 false positive due to occulusion by large tree and shadow
#F:\ottawa_image_db\45.391192,-75.745004
#5 real plus occulusion
#F:\ottawa_image_db\45.386595,-75.755356
#5 false positive occulusion
#F:\ottawa_image_db\45.388473,-75.758767
#5 multiyear
#F:\ottawa_image_db\45.342973,-75.785467
#5 normal
#F:\ottawa_image_db\45.351836,-75.742754
#5 normal
#F:\ottawa_image_db\45.353614,-75.742434
#5 normal
#F:\ottawa_image_db\45.353038,-75.743813
#5 normal
#F:\ottawa_image_db\45.352735,-75.746411
#5 normal
#F:\ottawa_image_db\45.348013,-75.743336
#5 normal
#F:\ottawa_image_db\45.353763,-75.747868
plotexamples=function(){
dlist=c("F:/ottawa_image_db/45.395289,-75.734107",
"F:/ottawa_image_db/45.353038,-75.743813",
"F:/ottawa_image_db/45.430856,-75.634009",
"F:/ottawa_image_db/45.387784,-75.759421",
"F:/ottawa_image_db/45.331311,-75.790179",
"F:/ottawa_image_db/45.368548,-75.779295",
"F:/ottawa_image_db/45.391854,-75.759665",
"F:/ottawa_image_db/45.440927,-75.671258",
"F:/ottawa_image_db/45.405719,-75.726039",
"F:/ottawa_image_db/45.381848,-75.760526",
"F:/ottawa_image_db/45.412198,-75.674896")#,
#         "F:/ottawa_image_db/45.362226,-75.784759"       "F:/ottawa_image_db/45.391192,-75.745004","F:/ottawa_image_db/45.348997,-75.712858","F:/ottawa_image_db/45.348013,-75.743336","F:/ottawa_image_db/45.399765,-75.756267",
#"F:/ottawa_image_db/45.398931,-75.756158")
# dlist=c("F:/ottawa_image_db/45.405719,-75.726039")
# dlist=c("F:/ottawa_image_db/45.369725,-75.628113")
# dlist=c("F:/ottawa_image_db/45.362226,-75.784759")
#F:\ottawa_image_db\45.368548,-75.779295,F:\ottawa_image_db\45.367637,-75.778784,F:\ottawa_image_db\45.397599,-75.754770,F:\ottawa_image_db\45.397651,-75.754588 F:/ottawa_image_db/45.385800,-75.746943
par(mfrow = c(11, 6), mai = c(0, .2, .2, 0))
crow=1
for(k in dlist) {
curd = strsplit(dlist[crow], "/")[[1]][3]
ss = subset(predptso, DIRNAME == curd)
lf = list.files(dlist[crow],
full.names = F,
pattern = "\\.jpg$")
tst = vector("character")
for (i in lf) {
tst = c(tst, strsplit(i, "_")[[1]][1])
}
# tst = data.frame(allyears = tst)
# ssdf = data.frame(allyears = c(ss@data$YEAR1[1], ss@data$YEAR2))
allyears = as.character(ss@data$YEAR2)
par(mfg=c(crow,1))
pcount=1
for (i in lf) {
j1 = load.image(paste(dlist[crow], "/", i, sep = ""))
plot(j1, axes = F)
if (pcount == 1){
par(las=1)
mtext(paste("(", letters[crow], ")"), 2, crt = 90)#mtext("(a)",3)
par(las=0)
}
tt = strsplit(i, "_")[[1]][1]
mtext(tt, 3)
if (tt %in% allyears) {
par(las=1)
mtext("\u275A", 2,cex=2)#expression(bold(Delta))"\u26AB"
par(las=0)
}
pcount = pcount + 1
}
plot(studyarea)
xy=strsplit(strsplit(k,'/')[[1]][3],",")
xy=SpatialPoints(cbind(x=as.numeric(xy[[1]][2]),y=as.numeric(xy[[1]][1])),proj4string=srNAD83)
xy=spTransform(xy,srMTM9)
plot(xy,pch=16,col=2,add=TRUE)
crow=crow+1
}
}
plotexamples()
png("./figures/examples.png",units="in",width=6.5,height=10,res=300)
plotexamples()
dev.off()

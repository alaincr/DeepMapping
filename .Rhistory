spd.no=subset(spd,V3==0)
kde.training.yes = ptDensity(spd.yes,outercore)
kde.training.yes = ptDensity(spd.no,outercore)
# Create class breaks
cint=densBreaks(kde.training,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
#windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(3,1),mai=c(0,0,0,0),bty="n")
plot(kde.training, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kde.training.yes, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
plot(kde.training.no, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
kde.training = ptDensity(spd,outercore)
spd.yes=subset(spd,V3==1)
spd.no=subset(spd,V3==0)
kde.training.yes = ptDensity(spd.yes,outercore)
kde.training.no = ptDensity(spd.no,outercore)
# Create class breaks
cint=densBreaks(kde.training,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
#windows(width=8,height=11,xpinch=300,ypinch=300)
par(mfrow=c(3,1),mai=c(0,0,0,0),bty="n")
plot(kde.training, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kde.training.yes, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
plot(kde.training.no, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"C",cex=3)
source('http://www.sthda.com/upload/rquery_wordcloud.r')
install.packages(c("tm", "SnowballC", "wordcloud", "RColorBrewer", "RCurl", "XML")
)
filePath <- "http://www.sthda.com/sthda/RDoc/example-files/martin-luther-king-i-have-a-dream-speech.txt"
res<-rquery.wordcloud(filePath, type ="file", lang = "english")
filepath="https://arts.uottawa.ca/geography/undergraduate"
filePath <- "http://www.sthda.com/sthda/RDoc/example-files/martin-luther-king-i-have-a-dream-speech.txt"
res<-rquery.wordcloud(filePath, type ="file", lang = "english")
url = "http://www.sthda.com/english/wiki/create-and-format-powerpoint-documents-from-r-software"
rquery.wordcloud(x=url, type="url")
url="https://arts.uottawa.ca/geography/undergraduate"
rquery.wordcloud(x=url, type="url")
url="https://arts.uottawa.ca/geography/why-study"
rquery.wordcloud(x=url, type="url")
?rquery
rquery.wordcloud()
rquery.wordcloud
install.packages(c('rvest','wordcloud'))
install.packages(c("rvest", "wordcloud"))
library(rvest)
library(wordcloud)
test    <- read_html("https://arts.uottawa.ca/geography/why-study")
test
text    <- html_text(test)
content <- stringi::stri_extract_all_words(text, simplify = TRUE)
wordcloud(content, min.freq = 10, colors = RColorBrewer::brewer.pal(5,"Spectral"))
require(XML)
require(tm)
require(wordcloud)
require(RColorBrewer)
install.packages(packageName, repos = "<a class="vglnk" href="http://www.omegahat.org/R" rel="nofollow"><span>http</span><span>://</span><span>www</span><span>.</span><span>omegahat</span><span>.</span><span>org</span><span>/</span><span>R</span></a>", type = "source")
library(rvest)
library(wordcloud)
test    <- read_html("https://arts.uottawa.ca/geography/why-study")
text    <- html_text(test)
content <- stringi::stri_extract_all_words(text, simplify = TRUE)
wordcloud(content, min.freq = 10, colors = RColorBrewer::brewer.pal(5,"Spectral"))
test    <- read_html("https://arts.uottawa.ca/geography/why-study")
text    <- html_text(test)
content <- stringi::stri_extract_all_words(text, simplify = TRUE)
wordcloud(content, min.freq = 10, colors = RColorBrewer::brewer.pal(5,"Spectral"))
wordcloud(content, min.freq = 4, colors = RColorBrewer::brewer.pal(5,"Spectral"))
url="https://arts.uottawa.ca/geography/why-study"
rquery.wordcloud(x=url, type="url")
source('http://www.sthda.com/upload/rquery_wordcloud.r')
url="https://arts.uottawa.ca/geography/why-study"
rquery.wordcloud(x=url, type="url")
knitr::opts_chunk$set(echo = TRUE)
library(spatstat)
library(maptools)
library(stringr)
library(raster)
library(dplyr)
library(classInt)
library(rgdal)
library(arcgisbinding)
arc.check_product()
ptDensity = function(predpts, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(predpts),
eps = 100,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(sarea))
kdepredict <- mask(kdepredict, sarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts.b=readOGR(shapefilepath)
# arc.check_product()
# permitpts = arc.open(shapefilepath)
# permitpts.a = arc.select(permitpts)
# permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
kde.training = ptDensity(spd,outercore)
spd
outercore
# Get training data list
x = read.delim("./rproject/retrain.txt",sep = " ",header = FALSE)
ll = lapply(str_split(x[, 1], "/"), function(x)
x[4])
yy = unlist(lapply(str_split(ll, ","), function(x)
x[1]))
xx = unlist(lapply(str_split(ll, ","), function(x)
x[2]))
yy = unlist(lapply(str_split(yy, "new-"), function(x) {
if (length(x) == 2) {
x[2]
}
else{
x[1]
}
}))
# Check for NA
yy[is.na(as.numeric(yy))]
xx = unlist(lapply(str_split(xx, "new-"), function(x) {
if (length(x) == 2) {
x[2]
}
else{
x[1]
}
}))
# Check for NA
xx[is.na(as.numeric(xx))]
# put x,y into x dataframe for coordinates of each pair
x$Long = xx
x$Lat = yy
x = x[which(x$V3 != "np"),]
x = x[which(x$V3 != "nof"),]
# Remove nonused levels of factors (3 or 4 bad rows)
x = droplevels(x)
#
# Make spdf of training data duels file
spd = SpatialPointsDataFrame(cbind(x = as.numeric(x$Long), y = as.numeric(x$Lat)), x)
# Assign NAD83
srNAD83= CRS("+init=epsg:4269")
proj4string(spd) = srNAD83
# Reproject to MTM9 NAD83
srMTM9 = CRS("+init=epsg:32189")
spd = spTransform(spd, srMTM9)
# Make unique point file for probabilities
#spdU=remove.duplicates(spd)
# Open study area mask, convert to spdf and reproject to MTM9
m4 = openSPDF(shapefilepath = './shapefiles/core_multi.shp')
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
outercore=openSPDF(shapefilepath = './shapefiles/outercore.shp')
knitr::opts_chunk$set(echo = TRUE)
library(spatstat)
library(maptools)
library(stringr)
library(raster)
library(dplyr)
library(classInt)
library(rgdal)
library(arcgisbinding)
arc.check_product()
ptDensity = function(predpts, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(predpts),
eps = 100,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(sarea))
kdepredict <- mask(kdepredict, sarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts.b=readOGR(shapefilepath)
# arc.check_product()
# permitpts = arc.open(shapefilepath)
# permitpts.a = arc.select(permitpts)
# permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
# Get training data list
x = read.delim("./rproject/retrain.txt",sep = " ",header = FALSE)
ll = lapply(str_split(x[, 1], "/"), function(x)
x[4])
yy = unlist(lapply(str_split(ll, ","), function(x)
x[1]))
xx = unlist(lapply(str_split(ll, ","), function(x)
x[2]))
yy = unlist(lapply(str_split(yy, "new-"), function(x) {
if (length(x) == 2) {
x[2]
}
else{
x[1]
}
}))
# Check for NA
yy[is.na(as.numeric(yy))]
xx = unlist(lapply(str_split(xx, "new-"), function(x) {
if (length(x) == 2) {
x[2]
}
else{
x[1]
}
}))
# Check for NA
xx[is.na(as.numeric(xx))]
# put x,y into x dataframe for coordinates of each pair
x$Long = xx
x$Lat = yy
x = x[which(x$V3 != "np"),]
x = x[which(x$V3 != "nof"),]
# Remove nonused levels of factors (3 or 4 bad rows)
x = droplevels(x)
#
# Make spdf of training data duels file
spd = SpatialPointsDataFrame(cbind(x = as.numeric(x$Long), y = as.numeric(x$Lat)), x)
# Assign NAD83
srNAD83= CRS("+init=epsg:4269")
proj4string(spd) = srNAD83
# Reproject to MTM9 NAD83
srMTM9 = CRS("+init=epsg:32189")
spd = spTransform(spd, srMTM9)
# Make unique point file for probabilities
#spdU=remove.duplicates(spd)
# Open study area mask, convert to spdf and reproject to MTM9
m4 = openSPDF(shapefilepath = './shapefiles/core_multi.shp')
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
outercore=openSPDF(shapefilepath = './shapefiles/outercore.shp')
kde.training = ptDensity(spd,outercore)
spd.yes=subset(spd,V3==1)
spd.no=subset(spd,V3==0)
kde.training.yes = ptDensity(spd.yes,outercore)
kde.training.no = ptDensity(spd.no,outercore)
# Create class breaks
cint=densBreaks(kde.training,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
#windows(width=8,height=11,xpinch=300,ypinch=300)
par(mfrow=c(3,1),mai=c(0,0,0,0),bty="n")
plot(kde.training, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kde.training.yes, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
plot(kde.training.no, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"C",cex=3)
# makeplot
windows(width=8,height=11,xpinch=300,ypinch=300)
par(mfrow=c(3,1),mai=c(0,0,0,0),bty="n")
plot(kde.training, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kde.training.yes, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
plot(kde.training.no, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"C",cex=3)
savePlot("f:/KDE_TRAINING_DISTRIB.png",type="png")
source('http://www.sthda.com/upload/rquery_wordcloud.r')
url="https://arts.uottawa.ca/geography/why-study"
rquery.wordcloud(x=url, type="url")
75*7
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
kdepredict
plot(kdepredict)
predpts
summary(predpts)
predpts
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
predpts
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
plot(predpts)
head(predpts)
predpts.gt2011=subset(predpts,YEAR2>=2011)
predpts
plot(predpts)
subset(predpts,YEAR2>=2011)
predpts$YEAR2
?readOGR
ptDensity = function(a, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(a),
eps = 100,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(sarea))
kdepredict <- mask(kdepredict, sarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts.b=readOGR(shapefilepath,stringsAsFactors = FALSE)
# arc.check_product()
# permitpts = arc.open(shapefilepath)
# permitpts.a = arc.select(permitpts)
# permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
predpts@data$YEAR2
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
ptDensity = function(a, sarea) {
# Calculate KDE
kdepredict = density.ppp(as.ppp(a),
eps = 100,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(sarea))
kdepredict <- mask(kdepredict, sarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts.b=readOGR(shapefilepath)#,stringsAsFactors = FALSE)
# arc.check_product()
# permitpts = arc.open(shapefilepath)
# permitpts.a = arc.select(permitpts)
# permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
options(stringsAsFactors = FALSE)
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
options(stringsAsFactors = TRUE)
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
predpts@data$YEAR1=as.numeric(predpts@data$YEAR1)
predpts@data$YEAR2=as.numeric(predpts@data$YEAR2)
predpts@data$YEAR1
predpts@data$YEAR2
options(stringsAsFactors = FALSE)
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
predpts@data$YEAR1=as.numeric(predpts@data$YEAR1)
predpts@data$YEAR2=as.numeric(predpts@data$YEAR2)
predpts@data$YEAR1
predpts@data$YEAR2
options(stringsAsFactors = FALSE)
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
predpts@data$YEAR1=as.numeric(predpts@data$YEAR1)
predpts@data$YEAR2=as.numeric(predpts@data$YEAR2)
predpts@data$PRED=as.numeric(predpts@data$PRED)
options(stringsAsFactors = TRUE)
predpts.gt2011=subset(predpts,YEAR2>=2011)
predpts.gt2011
# Get predictions after 2011
predpts.gt2011=subset(predpts,YEAR2>=2011)
permits@bbox=studyarea@bbox
predpts.gt2011@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts.gt2011,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
#windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
# makeplot
windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/figure_pred_vs_permit.png",type="png")
# Create class breaks
cint=densBreaks(kde.training,9,'equal')
cint2=densBreaks(kde.training.yes,9,'equal')
cint3=densBreaks(kde.training.no,9,'equal')
# makeplot
#windows(width=8,height=11,xpinch=300,ypinch=300)
par(mfrow=c(3,1),mai=c(0,0,0,0),bty="n")
plot(kde.training, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kde.training.yes, breaks=cint2$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
plot(kde.training.no, breaks=cint3$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"C",cex=3)
# makeplot
windows(width=8,height=11,xpinch=300,ypinch=300)
par(mfrow=c(3,1),mai=c(0,0,0,0),bty="n")
plot(kde.training, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kde.training.yes, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
plot(kde.training.no, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"C",cex=3)
savePlot("f:/KDE_TRAINING_DISTRIB.png",type="png")
# makeplot
windows(width=8,height=11,xpinch=300,ypinch=300)
par(mfrow=c(3,1),mai=c(0,0,0,0),bty="n")
plot(kde.training, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kde.training.yes, breaks=cint2$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
plot(kde.training.no, breaks=cint3$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(outercore,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"C",cex=3)
savePlot("f:/KDE_TRAINING_DISTRIB.png",type="png")
plot(kde.training.yes)

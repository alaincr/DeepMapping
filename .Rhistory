kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
ptDensity = function(predpts, sarea) {
# Calculate KDE on training locations & convert to raster obj
kdepredict = density.ppp(as.ppp(predpts),
eps = 20,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, CRS(proj4string(outCS)))
return(permits)
}
ptDensity = function(predpts, sarea) {
# Calculate KDE on training locations & convert to raster obj
kdepredict = density.ppp(as.ppp(predpts),
eps = 20,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, CRS(proj4string(outCS)))
return(permits)
}
# permitpts = arc.open('./shapefiles/permits.shp')
# permitpts.a = arc.select(permitpts)
# permitpts.b = arc.data2sp(permitpts.a)
# permits = spTransform(permitpts.b, CRS(proj4string(spd)))
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
ptDensity = function(predpts, sarea) {
# Calculate KDE on training locations & convert to raster obj
kdepredict = density.ppp(as.ppp(predpts),
eps = 20,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
# permitpts = arc.open('./shapefiles/permits.shp')
# permitpts.a = arc.select(permitpts)
# permitpts.b = arc.data2sp(permitpts.a)
# permits = spTransform(permitpts.b, CRS(proj4string(spd)))
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
# predictedpoints = arc.open('./shapefiles/predicted.shp')
# predictedpoints.a = arc.select(predictedpoints)
# predictedpoints.b = arc.data2sp(predictedpoints.a)
# predpts = spTransform(predictedpoints.b, CRS(proj4string(spd)))
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# masklyr = arc.open('./shapefiles/core_multi.shp')
# masklyr.a = arc.select(masklyr)
# masklyr.b = arc.data2sp(masklyr.a)
# studyarea = spTransform(masklyr.b, CRS(proj4string(spd)))
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
# hoods = arc.open('./shapefiles/core.shp')
# hoods.a = arc.select(hoods)
# hoods.b = arc.data2sp(hoods.a)
# nbrhoods = spTransform(hoods.b, CRS(proj4string(spd)))
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# KDE permits
# Calculate KDE on building permits & convert to raster obj
# kdepermits = density.ppp(as.ppp(permits),
#                   eps = 20,
#                   kernel = 'gaussian',
#                   sigma = 200)
#
# kdepermits = raster(kdepermits)
# kdepermits <- crop(kdepermits, extent(studyarea))
# kdepermits <- mask(kdepermits, studyarea)
kdepermits=ptDensity(kdepermits,studyarea)
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
win.graph(width=8,height=4)
par(mfrow=c(1,2),mai=c(0,0,0,0))
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
# makeplot
win.graph(width=8,height=4)
par(mfrow=c(1,2),mai=c(0,0,0,0))
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
# makeplot
win.graph(width=8,height=4)
par(mfrow=c(1,2),mai=c(0,0,0,0))
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
win.graph(width=8,height=4)
par(mfrow=c(1,2),mai=c(0,0,0,0))
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
win.graph(width=8,height=4)
par(mfrow=c(1,2),mai=c(0,0,0,0))
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE)
win.graph(width=8,height=4)
par(mfrow=c(1,2),mai=c(0,0,0,0))
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
win.graph(width=8,height=4)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
studyarea
?density.ppp
studyarea@bbox
permits@bbox
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
win.graph(width=8,height=4)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
?win.graph
win.graph(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,lwd=0.5)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
spplot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
spplot(kdepredict)
?spplot
spplot(nbrhoods,edge.col=2,add=TRUE)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
spplot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
?plot
plot(nbrhoods,add=TRUE,type="l",lwd=0.5)
warnings()
plot(nbrhoods,add=TRUE,border=2,lwd=0.5)
plot(nbrhoods,add=TRUE,border="gray",lwd=0.5)
plot(nbrhoods,add=TRUE,border=rgb(104,104,104,1),lwd=0.5)
plot(nbrhoods,add=TRUE,border=rgb(104/255,104/255,104/255,1),lwd=0.5)
plot(nbrhoods,add=TRUE,border=rgb(124/255,124/255,124/255,1),lwd=0.5)
plot(nbrhoods,add=TRUE,border=rgb(134/255,134/255,134/255,1),lwd=0.5)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
plot(nbrhoods,add=TRUE,border=rgb(104/255,104/255,104/255,1),lwd=0.5)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
savePlot("f:/test.png",type="png")
savePlot("f:/test.png",type="png",device = cur.dev())
?savePlot
savePlot("f:/test.png",type="png")
savePlot("f:/test.png",type="png",device=3)
graphics.off()
# makeplot
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
savePlot("f:/test.png",type="png",device=2)
?par
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A")
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
graphics.off()
predpts
predpts@data
head(predpts@data)
p = predpts$YEAR2
p
p>=2011
head(predpts@data)
p = predpts[predpts$YEAR2>=2011]
?subset
p=subset(predpts,YEAR2>=2011)
p
predpts
View(p)
View(p)
View(p)
p
summary(p$YEAR2)
which(predpts$YEAR2==2011)
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
graphics.off()
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
# makeplot
windows(width=8,height=4,xpinch=200,ypinch=200)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
ptDensity = function(predpts, sarea) {
# Calculate KDE on training locations & convert to raster obj
kdepredict = density.ppp(as.ppp(predpts),
eps = 10,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
version
memory.limit(size=56000)
?memory.limit
memory.size()
library(spatstat)
library(maptools)
library(stringr)
library(raster)
library(dplyr)
library(classInt)
library(arcgisbinding)
arc.check_product()
knitr::opts_chunk$set(echo = TRUE)
ptDensity = function(predpts, sarea) {
# Calculate KDE on training locations & convert to raster obj
kdepredict = density.ppp(as.ppp(predpts),
eps = 10,
kernel = 'gaussian',
sigma = 200)
kdepredict = raster(kdepredict)
kdepredict <- crop(kdepredict, extent(studyarea))
kdepredict <- mask(kdepredict, studyarea)
return(kdepredict)
}
densBreaks = function(kdepredict,n,style) {
vals = values(kdepredict)
vals = vals[!is.na(vals)]
cint = classIntervals(vals, n = n, style = style)
return(cint)
}
openSPDF = function(shapefilepath,outCS=CRS("+init=epsg:32189")) {
permitpts = arc.open(shapefilepath)
permitpts.a = arc.select(permitpts)
permitpts.b = arc.data2sp(permitpts.a)
permits = spTransform(permitpts.b, outCS)
return(permits)
}
permits=openSPDF(shapefilepath = './shapefiles/permits.shp')
predpts=openSPDF(shapefilepath = './shapefiles/predicted.shp')
# Get predictions after 2011
predpts=subset(predpts,YEAR2>=2011)
studyarea=openSPDF(shapefilepath = './shapefiles/core_multi.shp')
nbrhoods=openSPDF(shapefilepath = './shapefiles/core.shp')
permits@bbox=studyarea@bbox
predpts@bbox=studyarea@bbox
# Calculate KDE on training locations & convert to raster obj
kdepredict=ptDensity(predpts,studyarea)
kdepermits=ptDensity(permits,studyarea)
# Create class breaks
cint=densBreaks(kdepredict,9,'equal')
# Make color palette
my.palette=colorRampPalette(c(rgb(211/255,229/255,232/255,1), rgb(46/255,100/255,140/255,1)), alpha = TRUE)(9)
# makeplot
windows(width=8,height=4,xpinch=300,ypinch=300)
par(mfrow=c(1,2),mai=c(0,0,0,0),bty="n")
plot(kdepredict, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"A",cex=3)
plot(kdepermits, breaks=cint$brks,col = my.palette,axes=FALSE,legend=FALSE)
plot(nbrhoods,add=TRUE,border=rgb(144/255,144/255,144/255,1),lwd=0.5)
par(usr=c(0,1,0,1))
text(0.05,0.9,"B",cex=3)
savePlot("f:/test.png",type="png")
?spatstat
citation("spatstat")
version("spatstat")
sessionInfo()
install.packages(c("backports", "BH", "bindr", "bindrcpp", "bmp", "caTools", "curl", "data.table", "DBI", "deldir", "devtools", "DiagrammeR", "digest", "doParallel", "dplyr", "drat", "evaluate", "foreach", "ggplot2", "git2r", "glue", "googleway", "gridExtra", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "munsell", "NMF", "openssl", "pkgmaker", "plogr", "polyclip", "profvis", "psych", "purrr", "R.oo", "R6", "Rcpp", "readbitmap", "registry", "reshape2", "rgdal", "rlang", "rmarkdown", "rngtools", "roxygen2", "rprojroot", "rstudioapi", "scales", "shiny", "sourcetools", "sp", "spatstat", "spatstat.utils", "stringi", "stringr", "tibble", "viridis", "viridisLite", "visNetwork", "withr", "XML", "yaml"))
install.packages(c("backports", "BH", "bindr", "bindrcpp", "bmp", "caTools", "curl", "data.table", "DBI", "deldir", "devtools", "DiagrammeR", "digest", "doParallel", "dplyr", "drat", "evaluate", "foreach", "ggplot2", "git2r", "glue", "googleway", "gridExtra", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "munsell", "NMF", "openssl", "pkgmaker", "plogr", "polyclip", "profvis", "psych", "purrr", "R.oo", "R6", "Rcpp", "readbitmap", "registry", "reshape2", "rgdal", "rlang", "rmarkdown", "rngtools", "roxygen2", "rprojroot", "rstudioapi", "scales", "shiny", "sourcetools", "sp", "spatstat", "spatstat.utils", "stringi", "stringr", "tibble", "viridis", "viridisLite", "visNetwork", "withr", "XML", "yaml"))
install.packages(c("backports", "BH", "bindr", "bindrcpp", "bmp", "caTools", "curl", "data.table", "DBI", "deldir", "devtools", "DiagrammeR", "digest", "doParallel", "dplyr", "drat", "evaluate", "foreach", "ggplot2", "git2r", "glue", "googleway", "gridExtra", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "munsell", "NMF", "openssl", "pkgmaker", "plogr", "polyclip", "profvis", "psych", "purrr", "R.oo", "R6", "Rcpp", "readbitmap", "registry", "reshape2", "rgdal", "rlang", "rmarkdown", "rngtools", "roxygen2", "rprojroot", "rstudioapi", "scales", "shiny", "sourcetools", "sp", "spatstat", "spatstat.utils", "stringi", "stringr", "tibble", "viridis", "viridisLite", "visNetwork", "withr", "XML", "yaml"))
install.packages(c("backports", "BH", "bindr", "bindrcpp", "bmp", "caTools", "curl", "data.table", "DBI", "deldir", "devtools", "DiagrammeR", "digest", "doParallel", "dplyr", "drat", "evaluate", "foreach", "ggplot2", "git2r", "glue", "googleway", "gridExtra", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "imager", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "munsell", "NMF", "openssl", "pkgmaker", "plogr", "polyclip", "profvis", "psych", "purrr", "R.oo", "R6", "Rcpp", "readbitmap", "registry", "reshape2", "rgdal", "rlang", "rmarkdown", "rngtools", "roxygen2", "rprojroot", "rstudioapi", "scales", "shiny", "sourcetools", "sp", "spatstat", "spatstat.utils", "stringi", "stringr", "tibble", "viridis", "viridisLite", "visNetwork", "withr", "XML", "yaml"))
